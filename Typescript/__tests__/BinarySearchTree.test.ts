import BinarySearchTree from "../code/BinarySearchTree";

test("binary search tree", () => {
  const bst = new BinarySearchTree();
  expect(bst.delete(13)).toBe(undefined);
  bst.insert(13);
  expect(bst.delete(13)).toBe(13);
  bst.insert(5);
  bst.insert(3);
  bst.insert(7);
  bst.insert(2);
  bst.insert(4);
  bst.insert(6);
  bst.insert(8);
  expect(bst.preOrderToArray()).toEqual([5, 3, 2, 4, 7, 6, 8]);
  expect(bst.inOrderToArray()).toEqual([2, 3, 4, 5, 6, 7, 8]);
  bst.reverse();
  expect(bst.inOrderToArray()).toEqual([8, 7, 6, 5, 4, 3, 2]);
  bst.reverse();
  expect(bst.postOrderToArray()).toEqual([2, 4, 3, 6, 8, 7, 5]);
  expect(bst.breadthFirstToArray()).toEqual([5, 3, 7, 2, 4, 6, 8]);
  expect(bst.delete(5)).toBe(5);
  expect(bst.preOrderToArray()).toEqual([4, 3, 2, 7, 6, 8]);
  expect(bst.inOrderToArray()).toEqual([2, 3, 4, 6, 7, 8]);
  expect(bst.postOrderToArray()).toEqual([2, 3, 6, 8, 7, 4]);
  expect(bst.delete(3)).toBe(3);
  expect(bst.preOrderToArray()).toEqual([4, 2, 7, 6, 8]);
  expect(bst.inOrderToArray()).toEqual([2, 4, 6, 7, 8]);
  bst.reverse();
  expect(bst.inOrderToArray()).toEqual([8, 7, 6, 4, 2]);
  bst.reverse();
  expect(bst.postOrderToArray()).toEqual([2, 6, 8, 7, 4]);
  expect(bst.breadthFirstToArray()).toEqual([4, 2, 7, 6, 8]);
  expect(bst.delete(2)).toBe(2);
  expect(bst.preOrderToArray()).toEqual([4, 7, 6, 8]);
  expect(bst.inOrderToArray()).toEqual([4, 6, 7, 8]);
  expect(bst.postOrderToArray()).toEqual([6, 8, 7, 4]);
  expect(bst.delete(4)).toBe(4);
  expect(bst.preOrderToArray()).toEqual([7, 6, 8]);
  expect(bst.inOrderToArray()).toEqual([6, 7, 8]);
  expect(bst.postOrderToArray()).toEqual([6, 8, 7]);
});
